/**
 * This module was automatically generated by `ts-interface-builder`
 */
import * as t from 'ts-interface-checker';
// tslint:disable:object-literal-key-quotes

export const Only = t.iface([], {
	type: t.lit('only'),
	only: t.array('ISubscriptionTarget')
});

export const Ignore = t.iface([], {
	type: t.lit('ignore'),
	ignore: t.array('ISubscriptionTarget')
});

export const All = t.iface([], {
	type: t.lit('all')
});

export const MethodSubscription = t.union('All', 'Only', 'Ignore');

export const ISubscriptionTarget = t.iface([], {
	pallet: 'string',
	method: 'string'
});

export const RawAccount = t.iface([], {
	address: 'string',
	nickname: 'string'
});

export const EmailConfig = t.iface([], {
	from: 'string',
	to: t.array('string'),
	gpgpubkey: t.opt('string'),
	transporter: 'any'
});

export const MatrixConfig = t.iface([], {
	userId: 'string',
	accessToken: 'string',
	roomId: 'string',
	server: 'string'
});

export const FsConfig = t.iface([], {
	path: 'string'
});

export const ReportersConfig = t.iface([], {
	email: t.opt('EmailConfig'),
	matrix: t.opt('MatrixConfig'),
	fs: t.opt('FsConfig'),
	console: t.opt('unknown')
});

export const ApiSubscription = t.enumtype({
	Head: 'head',
	Finalized: 'finalized'
});

export const AppConfig = t.iface([], {
	accounts: t.array('RawAccount'),
	endpoints: t.array('string'),
	method_subscription: 'MethodSubscription',
	api_subscription: 'ApiSubscription',
	reporters: 'ReportersConfig'
});

const exportedTypeSuite: t.ITypeSuite = {
	Only,
	Ignore,
	All,
	MethodSubscription,
	ISubscriptionTarget,
	RawAccount,
	EmailConfig,
	MatrixConfig,
	FsConfig,
	ReportersConfig,
	ApiSubscription,
	AppConfig
};
export default exportedTypeSuite;
